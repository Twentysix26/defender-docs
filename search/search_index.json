{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Welcome to the documentation of Defender. Defender is a big and complex cog but I promise that if you hang in there you could just make it ;) It is recommend that you first read this page and then head to the configuration guide.</p>"},{"location":"#what-is-defender","title":"What is Defender","text":"<p>Defender is what could best be defined as a suite of tools aimed primarily at rendering your Discord community safe and secure. Functionalities are splits in modules:  </p> <ul> <li><code>Auto modules</code>, which are automated moderation and monitoring functionalities</li> <li><code>Manual modules</code>, which are tools that you can use in time of need</li> </ul> <p>Each module is optional, meaning that you can decide to only enable specific parts of Defender. Despite being designed to counter serious threats Defender can also be a very valuable tool for smaller communities with less traffic.</p> <pre><code>graph TD\n  A[Auto modules];\n  A -.- B[(Invite filter)]\n  A -.- C[(Join monitor)];\n  A -.- D[(Raider detection)];\n  A -.- E[(Comment analysis)];\n  A -.- F[(Warden)];\n  G[Manual modules];\n  G -.- H[(Alert)]\n  G -.- I[(Vaporize)];\n  G -.- J[(Silence)];\n  G -.- K[(Voteout)];\n  D -.- G\n\n  linkStyle 9 stroke-width:0px;</code></pre> Auto modulesManual modules Module Description Invite filter Detects and takes action on unwanted Discord invites posted in your community Join monitor Detects surges of users joining your server and notifies the staff about newly created accounts. It can also raise your server's verification level if it detects a raid. Raider detection Also commonly referred as antispam / antiraid, it takes action on users spamming messages. Comment analysis Leverages the power of machine learning to detect a wide range of potentially unwanted messages. Powered by Google's Perspective API. Warden A complex module that lets you define rules. Rules are sets of conditions and actions that you can define to automate moderation, monitoring and much more. If something isn't covered by the other modules, it can probably be done with Warden. Module Description Alert Allows your helper roles to report threats to the staff. Upon \"ringing the bells\" the staff is privately pinged with detailed context as to where the emergency is taking place. Additionally, this module can be configured so that after a certain time with no staff activity the server enters a state of emergency and certain modules (such as voteout) are rendered available to helpers. Vaporize Particularly effective against raids. It provides a quick way to ban vast amounts of new users without creating new mod-log entries. Silence Upon activation, it is able to instantly delete messages from certain ranks. This is particularly useful when a raid is in progress. Voteout Starts a voting session to expel a user. This module was designed specifically for emergency mode so that when the staff is absent helper roles are still able to take care of things by themselves. <p>All these modules deliver notifications to your designed Defender notification channel. For more information about how to effectively set up your server for Defender, see the configuration guide.</p>"},{"location":"#ranks","title":"Ranks","text":"<p>Defender categorizes your userbase into different ranks. They range from Rank 1, your most trusted users until Rank 4, new users with little to no activity in your server. Thanks to this system, you are able to set up each different module so that they only target people below a certain rank, meaning that your regular users will be safe from the many safety measures that Defender offers. A regular user will only be able to rank up until Rank 2. Rank 1 is considered a special rank that can only be attained through designed roles or by being a staff member.</p> <pre><code>graph BT\n  A[/Rank 4\\] --&gt; | Time since join or messages sent | B[/Rank 3\\];\n  B --&gt; | Time since join | C[/Rank 2\\]\n  C -.-&gt; | Special role or staff | D[/Rank 1\\];</code></pre> Rank Description 1 Staff, trusted roles and helper roles 2 Regular users who don't fit in any of the lower ranks 3 Users who joined less than X days ago. Configurable. 4 Users who joined less than X days ago and have sent fewer than Y messages. Configurable. <p>Tip</p> <p>Want to know which Rank a particular user is? Use <code>[p]def identify &lt;user&gt;</code></p>"},{"location":"#warden-checks","title":"Warden checks","text":"<p> New in v2.0 </p> <p>Note</p> <p>Warden checks require a basic understanding of the Warden automodule. If you feel lost, it might be better to read its docs first.</p> <p>Warden checks are a powerful feature that allows users to set custom Warden conditions to further pinpoint the targets of standard modules. With Warden checks, users can specify their own sets of conditions to ensure that a module only targets certain users, or only certain users under a specific set of conditions. For example, a user may want to restrict the Invite Filter automodule to only work in channels A and B or to target users with roles Y and Z. By using Warden checks, the user can define the necessary conditions to achieve this. Warden checks are evaluated after all other standard checks have been performed, ensuring that they have the final say in determining whether a user should be targeted. They can consist of any combination of conditions and condition blocks, giving users greater flexibility and control over how each module operates. To better illustrate this, let's see in simple terms how the Invite Filter automodule would work:</p> <pre><code>graph TB\n  A[A message containing&lt;br&gt;an invite has been sent] &lt;--&gt; B{Is the message's&lt;br&gt;author staff?};\n  B --&gt; | No | C{Is the message's&lt;br&gt;author below rank X?}\n  C --&gt; | Yes | D{Are the custom&lt;br&gt;Warden checks satisfied?}\n  D --&gt; | Yes | E[Take action on&lt;br&gt;the author]\n  F[Do nothing]\n  B --&gt; | Yes | F\n  C --&gt; | No | F\n  D --&gt; | No | F\n  style D fill:#ff8166,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5</code></pre> <p>As you can see, Warden checks are the last thing that gets evaluated before taking action on the user. And they can be any combination of conditions and condition blocks. A few examples:</p> <pre><code>- channel-matches-any: [general] # Only work in the general channel\n</code></pre> <pre><code>- channel-is-public: true # Only work in public channels\n</code></pre> <pre><code>- if-not: # Users with the spammer role can spam everywhere\n  - user-has-any-role-in: [spammer]\n- if-not: # Users can only spam in the spam channel\n  - channel-matches-any: [spam]\n</code></pre> <p>Warden checks can be set in the settings subcommands of each module e.g. <pre><code>### To set them ###\n[p]dset invitefilter wdchecks\n- channel-is-public: true\n### Display them ###\n[p]dset invitefilter wdchecks\n### Remove them ###\n[p]dset invitefilter wdchecks remove\n</code></pre></p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#before-starting","title":"Before starting","text":"<p>Think a little about how your community is structured:</p> <ul> <li>Which category of roles (users) rarely cause problems?</li> <li>Which is the role that you really trust? Users who could even help you moderate for brief amounts of time?</li> </ul> <p>The answer to these questions will be important during configuration. The modules with the most severe effects should, ideally, not affect your highest rank.</p> <p>Important</p> <p>Setting Red's core admin and mod roles is mandatory. You will not be able to enable Defender until you set them. See the core <code>[p]set</code> command.</p> <p>Creating a ad-hoc channel for Defender notifications is recommended. While Defender takes precautions to ensure that the channel will not be spammed by notifications, it can get intense at times. Plus, having a separate channel allows your staff to better set up their Discord notifications.</p>"},{"location":"configuration/#what-to-do","title":"What to do","text":"<p>Assuming you have already installed and loaded the Defender cog, you are now ready to set things up.  </p> <p>Important</p> <p>It's of paramount importance that you understand how Ranks work before configuring Defender. As a general rule, you may want most if not all of the modules to only target Rank 2 or below.</p> <p>Consider the command <code>[p]def status</code> your central control panel for all things Defender. From there you can see its overall status plus the status and settings of each module. It also serves as your guide when you set things up, as at the bottom of each separate page it will show you which subgroup of commands (in <code>[p]dset</code>) to further explore.  </p> <p> </p> The [p]def status command <p>As mentioned in the Overview page, you can choose which functionalities you want to be active. In order to get things up and running, you have to decide which modules you want to use, set them up and toggle them on. Once you've done that (and fixed any general misconfiguration issue), you are ready to turn on Defender as a whole from the <code>[p]dset general</code> subgroup.</p> <p>If you are familiar with exploring Red's commands the configuration process should be relatively straightforward as long as you set time aside and ready up for some reading.</p>"},{"location":"configuration/#a-maybe-helpful-flowchart","title":"A maybe helpful flowchart","text":"<pre><code>graph TB\n  subgraph Initial configuration\n        A[Start here!&lt;br&gt;Issue def status]\n        A ----&gt; B{Are there general&lt;br&gt;misconfiguration errors?};\n        style A color:#33cc33,stroke:#33cc33\n        B --&gt;|Yes| C[Fix them];\n        C --&gt; A\n    end\n    subgraph Module configuration\n        B --&gt;|No| D[Next page];\n        D --&gt; E{Do these modules&lt;br&gt;interest you?};\n        E --&gt;|Yes| F[What you see in bold are settings that you can change.&lt;br&gt;Explore the subgroup shown at the bottom of the page];\n        F --&gt; G[Toggle the module on]\n        G --&gt; H{Are you done&lt;br&gt;with the modules?};\n        H --&gt;|No| D[Next page];\n    end\n    subgraph Finalization\n        H --&gt;|Yes| I[It is time to toggle Defender as a whole.&lt;br&gt;Use dset general to do this];\n        I --&gt; J{Is there any blocking error?};\n        J --&gt; |Yes| K[Fix it];\n        K --&gt; J\n        J ----&gt; |No| L((You are done!));\n        style L color:#33cc33,stroke:#33cc33\n    end</code></pre>"},{"location":"warden/examples/","title":"Examples","text":"<p>Info</p> <p>If you're looking for ready examples or useful templates to start working from check out the dedicated repository. Contributions are welcome!</p>"},{"location":"warden/examples/#sending-a-message","title":"Sending a message","text":"<p>The following rule is about <code>send-message</code>. This action can be used to send messages, which may include an embed, to a variety of destinations. It supports context variables for the destination (edit_message_id too) and the message content / embed. In this example you will notice that this action supports two formats: simple (a YAML list <code>[ ]</code>) and more complex (a YAML map <code>{ }</code>). Note that when using the more complex format whitespace can be finicky: it is recommended that you use a YAML validator to preserve your sanity.</p> <pre><code>rank: 1\nname: message-test\nevent: on-message\nif:\n  - message-matches-any: [test send]\ndo:\n  - send-message: [$channel_id, hello] # Sends a message to the channel in the context\n  - send-message: [$user_id, hello] # Sends a message to the user who triggered the rule\n  - send-message: [133917673317401111, hello] # Sends a message to the specified id (channel or user)\n  - send-message: [general, hello] # Sends a message to the specified channel (channel name)\n  - send-message: {id: $channel_id, title: \"My embed\", description: \"A simple embed\"} # Sends a simple embed in the context's channel\n  # The following one sends a (very complex) embed and it's done just to show the syntax\n  # Note that NOT all fields are mandatory: just use the fields you need\n  - send-message:\n      id: $channel_id\n      content: message content # content of the message\n      author_name: $user\n      author_url: $user_avatar_url\n      author_icon_url: $user_avatar_url\n      title: Have you ever wondered what happens if you use all the embed options?\n      description: \"Has science gone too far?\" # description of the embed\n      footer_text: \"Made with Warden\"\n      footer_icon_url: $user_avatar_url\n      image: $user_avatar_url\n      add_timestamp: true # Add the current date / time to the embed\n      thumbnail: $user_avatar_url\n      url: $user_avatar_url\n      color: 0x59FF00 # Use a HTML color picker for this, with due adjustments: #59FF00 -&gt; 0x59FF00\n      fields: [{name: Some, value: might}, {name: think, value: so, inline: false}] # These are the embed fields, you can add more than 2... Or fewer.\n      # edit_message_id: 123456 # You can also edit a message by passing a valid message ID here. Empty values will be ignored.\n      # reply_message_id: 123456 # Reply to a message (ID). Must be in the same channel the message is being sent in\n      # ping_on_reply: true # Whether to ping on reply or not\n</code></pre>"},{"location":"warden/examples/#notifying-the-staff","title":"Notifying the staff","text":"<p>This rule shows how to use <code>notify-staff</code> and its many parameters <pre><code>rank: 1\nname: notify-test\nevent: on-message\nif:\n  - message-matches-any: [test notify]\ndo:\n  - notify-staff: \"hello\" # A basic, text-only, message in the staff channel\n\n# An elaborate staff notification. It will send an embed containing the title + description, \n# a handy link to instantly jump to the message, support for quick reactions\n# and additional fields with information about the user / the channel \n  - notify-staff:\n      title: \"Warning!\"\n      content: \"A user is spamming\"\n      jump_to_ctx_message: true\n      qa_target: $user_id # Quick action target\n      qa_reason: \"Spamming messages\" # Quick action reason, optional\n      no_repeat_for: 30 seconds # Ensures that this notif. won't be sent again in the next 30 secs\n      no_repeat_key: $rule_name-1 # An unique key that identifies this notif., make sure to set this too\n\n# A notification that uses all the parameters for showing purposes. Only use the parameters you need\n  - notify-staff:\n      content: \"A user is spamming\"\n      title: \"Warning!\"\n      fields:\n        - {name: \"Field1\", value: \"Foo\", inline: true}\n        - {name: \"Field2\", value: \"Bar\", inline: true}\n      add_ctx_fields: true\n      thumbnail: $user_avatar_url\n      footer_text: \"my footer text\"\n      ping: true # Pings the staff role\n      jump_to:\n        channel_id: \"$channel_id\"\n        message_id: \"$message_id\"\n      # jump_to_ctx_message: true # This cannot be done if jump_to is used\n      qa_target: $user_id\n      qa_reason: Spamming\n      no_repeat_for: 10 seconds\n      no_repeat_key: $rule_name-2\n      allow_everyone_ping: false\n</code></pre></p>"},{"location":"warden/examples/#a-simple-dehoister","title":"A simple dehoister","text":"<p>This rule renames users who are attempting to hoist. Hoisting means prepending an exclamation mark to the username with the purpose of showing up at the top of the user list. This rule can also be manually run against every server member (<code>[p]def warden run</code>). Trusted users, staff and users who already have a nickname are ignored. <pre><code>rank: 2\nname: dehoist\nevent: [on-user-join, manual]\nif:\n  - username-matches-any: [\"!*\"]\n  - if-not:\n      - nickname-matches-any: [\"*\"]\ndo:\n  - set-user-nickname: \"no hoisting\"\n</code></pre></p>"},{"location":"warden/examples/#preventing-attachments-from-new-users","title":"Preventing attachments from new users","text":"<p>This rule prevents new users (rank 4) from sending attachments. Staff is also notified about the deletion and is being given precise context about where that happened. <pre><code>rank: 4\nname: no-attachments-rank4\nevent: [on-message, on-message-edit]\nif:\n  - message-has-attachment: true\ndo:\n  - delete-user-message:\n  - send-message: [$channel_id, \"$user_mention Sorry, you are not allowed to send attachments.\"]\n  - notify-staff:\n      title: \"Attachment removed\"\n      content: \"A new user attempted to send an attachment\"\n      jump_to_ctx_message: true\n      add_ctx_fields: true\n      no_repeat_for: 30 seconds\n      no_repeat_key: $rule_name-1\n</code></pre></p>"},{"location":"warden/examples/#countering-mass-mentions","title":"Countering mass mentions","text":"<p>This rule bans any user (except trusted users and staff) who mentions at least 15 different people. <pre><code>rank: 2\nname: mention-ban-rank2\nevent: [on-message]\nif:\n  - message-contains-more-than-unique-mentions: 14\ndo:\n  - ban-user-and-delete: 1\n  - send-mod-log: \"User banned for mentioning too many people.\"\n</code></pre></p>"},{"location":"warden/examples/#taking-action-after-multiple-infractions","title":"Taking action after multiple infractions","text":"<p>The following two rules take advantage of the heat level system to kick a user after 3 infractions. Notice the <code>priority</code> parameter in the first rule. <pre><code>rank: 2\nname: bad-word\npriority: 1\nevent: on-message\nif:\n  - message-matches-any: [\"*b?d w?rd*\"]\ndo:\n  - delete-user-message:\n  - send-message: [$channel_id, \"No bad word here!\"]\n  - add-user-heatpoint: 1h\n</code></pre></p> <pre><code>rank: 2\nname: check-heat\nevent: on-message\nif:\n  - user-heat-is: 3\ndo:\n  - kick-user:\n</code></pre>"},{"location":"warden/overview/","title":"Overview","text":""},{"location":"warden/overview/#an-introduction-to-warden","title":"An introduction to Warden","text":"<p>Warden is the most versatile module that you can find in Defender. It allows you to define custom rules by combining a rich set of events, conditions and actions. Need to filter messages only in certain channels? Or maybe rename people meeting very specific requirements? Warden got you covered!</p>"},{"location":"warden/overview/#rule-format-a-basic-example","title":"Rule format: a basic example","text":"<p>Rules can be written in the YAML language and must be structured in a very specific way to be deemed a valid rule. Let's start with a basic scenario: you have an innate fear of spiders and you wish to delete any message that mentions them. So, without further ado, you add this rule through <code>[p]defender warden add</code> <pre><code>name: spiders-are-spooky\nrank: 1\nevent: on-message\nif:\n  - message-matches-any: [\"*spider*\"]\ndo:\n  - delete-user-message:\n</code></pre> And now let's break this down.  </p> <ul> <li><code>name</code> is the name of this rule. Every rule that you add will have an unique name to tell them apart. If you try to add a rule with a name that is already registered a confirmation will be asked before proceeding with overwrite.</li> <li><code>rank</code> is the highest rank that this rule will target. As explained in <code>[p]defender status</code>, Rank 1 is the highest rank there is. This means that every message that is sent will be targeted, even staff's.</li> <li><code>event</code> is when this rule will enter into effect. You can find the complete event list below.    A rule can also be defined with multiple events by using a list, example: <code>[on-message, on-message-edit]</code></li> <li><code>if</code> is the section where the conditions are defined. It supports both basic condition and special condition blocks (we'll get to that later). Every condition (and condition block) must resolve to <code>true</code> for the rule's action to be executed.  </li> <li><code>do</code> is the section where the actions are defined. Actions are ordered and will be executed in the order you have defined them. If one of them errors out for whatever reason, the action's execution will stop. You can monitor errors in <code>[p]defender monitor</code>.</li> </ul> <p>The condition <code>message-matches-any</code> takes the message in the context and analyzes its content. Here we have put the word spider surrounded by the wildcard <code>*</code>: this means that the word spider simply being present in a message is enough for this condition to pass.</p> <p>As you may have noticed the action <code>delete-user-message</code> doesn't need any parameter: it simply deletes the message in the context.  </p>"},{"location":"warden/overview/#context","title":"Context","text":"<p>Events have a context. <code>on-message</code> for example, will have <code>message</code> and <code>user</code> (the message author's) available, so any condition and action that is bound to analyze or take action on a message will be allowed to be used in that rule. A rule with the condition <code>message-matches-any</code> combined with the event <code>on-user-join</code> will be rejected: Warden doesn't have a message to analyze in this event, therefore the rule will be simply deemed invalid. Depending on the context you will have certain context variables available: there are some special actions that accept these variables in their parameters. Example: <pre><code>send-mod-log: \"No particular reason: I just really dislike $user.\"\n</code></pre> If the user in context is called HairySpider#9999 Warden will post a mod-log entry as <pre><code>No particular reason: I just really dislike HairySpider#9999.\n</code></pre></p>"},{"location":"warden/overview/#defining-a-more-complex-rule","title":"Defining a more complex rule","text":"<p>This first rule was very basic. What if, instead, we wanted to outright ban any user that mentions spiders OR has the word spider in their username/nickname, like our friend HairySpider#9999? But, since we are also hindered by a conscience, we want to give new users time to read the #rules channel, so we'll make sure to only punish infidels who are knowingly breaking the rules. Finally, the ruling class, staff members, must be free to discuss the enemy of the state without ever getting banned themselves. Wow, this got complicated fast huh? Luckily this is where condition blocks come to our aid.  </p> <p>At the time of writing there are three condition blocks:</p> <ul> <li><code>if-any</code></li> <li><code>if-all</code></li> <li><code>if-not</code> </li> </ul> <p>When a rule is processed, conditions blocks are individually resolved to true or false. For <code>if-all</code> to pass, every condition that it contains must be true. Every condition contained in <code>if-not</code> must resolve to false.  And as you can probably guess by now, a single true condition inside <code>if-any</code> is enough for it to pass. <pre><code>name: spiders-are-spooky\nrank: 1\nevent: on-message\nif:\n  - if-any:\n     - username-matches-any: [\"*spider*\"]\n     - message-matches-any: [\"*spider*\"]\n     - nickname-matches-any: [\"*spider*\"]\n  - if-not:\n     - user-joined-less-than: 2 hours\n     - is-staff: true\ndo:\n  - ban-user-and-delete: 1\n  - send-mod-log: \"Usage of the S word is not welcome in this community. Begone, $user.\"\n</code></pre> This is how a condition block is structured: it contains basic conditions. In our case here if the author's of a message has the word spider in their username/nickname OR their message contains the word spider AND at the same time hasn't joined less than 2 hours ago and is also not a staff member then they will be banned and all the messages sent by them in the last day will be deleted. Additionally, a mod-log entry for this last ban will be posted, condemning the author of this unspeakable crime for everyone to see. Our Orwellian quest of never ever allowing the S word to be used in our community again is now completed.</p> <p>As you can see condition blocks are a nice to have when you need a slightly more complex logic but remember that they're not mandatory, you can choose to use them only when you truly need to.</p>"},{"location":"warden/overview/#a-quick-recap","title":"A quick recap","text":"<p>Rules are triggered when the specified event takes place. The user's rank (if applicable, not every event has a user context) will be matched against the one defined in the rule. After that, the conditions will be evaluated and finally, if the conditions have passed, Warden will start processing the actions one by one. If any of the actions fail execution will stop and the error will be reported in <code>[p]defender monitor</code>. Rules can have an order of execution. See advanced features for more informations.</p>"},{"location":"warden/overview/#final-notes","title":"Final notes","text":"<p>Rules give you complete freedom by design. In that last example even trusted roles and helper roles aren't protected: if they pass the conditions they will be targeted by the actions. Be careful when you design the logic of a rule with drastic actions such as bans. The parameter rank is there to help you protect categories of users: trusted users, helper users and staff will always be immune if you set the rank to at least level 2.</p>"},{"location":"warden/overview/#advanced-features","title":"Advanced features","text":""},{"location":"warden/overview/#execution-order","title":"Execution order","text":"<p>The rules that you add do not have any guaranteed order of execution. You can change this, however, for example to make sure that a particular rule is always executed first (or after all your other ordered rules): this is done with the optional <code>priority</code> parameter. Priority can be a number between 1 and 999. When something happens, Defender gathers all the rules that you have added for that particular event and reorders them based on the priority parameter. Rules that lack a priority parameter will always be executed last, in an unordered manner. Defender will not stop you from defining multiple rules with the same priority: this is fine for rules that are for different events as they won't \"conflict\" with each other, however be mindful of that when you set up prioritized rules for a single event. This is how you define a rule with priority: <pre><code>name: always-first\nrank: 1\npriority: 1\nevent: on-message\nif:\n  - message-matches-any: [\"*\"]\ndo:\n  - send-to-monitor: \"I'm 1st!\"\n</code></pre></p>"},{"location":"warden/overview/#heat-level","title":"Heat level","text":"<p>Conditions give you a way to have your rules only execute under very specific conditions. However, what if, for example, we want our rule to execute after an user triggered some other rule a defined amount of times? That's where the heat level system comes in handy. Imagine that each user has an invisible bar, just like an health bar in videogames, where their heat level is being tracked:  </p> <p><code>[____________________]</code> </p> <p>This bar can contain a maximum of 100 heat points. Normally it is empty. Through rule actions you can assign points to this bar. Each point has a definite lifetime and you decide how much that is:  </p> <p><code>add-user-heatpoint: 10s</code>  (also accepts minutes and hours. Up to 24 hours) <code>[X___________________]</code> </p> <p>After 10 seconds have elapsed, the bar will go back to being empty. You can also assign multiple heatpoints at once with the same lifetime:  </p> <p><code>add-user-heatpoints: [5, 10m]</code> <code>[XXXXX_______________]</code> </p> <p>And in case you want to empty the bar: <code>empty-user-heat:</code> </p> <p>But how do you check for heat points in rules? With conditions: <code>user-heat-is: 5</code> or <code>user-heat-more-than: 2</code></p> <p>You may want to first assign heatpoints and then, in a separate rule, check the heat level. Since rules are normally executed in an unordered manner, remember to use the priority parameter to make sure that your heat-assigning rules are executed first. Channels also have heat levels and they work the same way as users'. You can find all the related conditions and actions in the sections below plus some handy examples in their dedicated page.  </p>"},{"location":"warden/overview/#custom-heat-level","title":"Custom heat level","text":"<p>Assuming you've read the previous section before this (please do so!), you may be wondering if you're limited to only two heat levels, per-channel and per-user. What if you want separate heat levels for each different rule, for example? This is where custom heat levels can help. They work exactly like channel and user heat levels, except for the fact that you can assign to them the name you want. A few context variables (specifically the IDs and rule name) are also available for extra flexibility. Custom heat levels are extremely versatile. To demonstrate the variety of use cases they can used for we'll build a rule specific cooldown using them. <pre><code>rank: 2\nname: trigger-with-cooldown\nevent: on-message\nif:\n  - message-matches-any: [\"hello\"]\n  - custom-heat-is: [\"$rule_name\", 0]\ndo:\n  - add-custom-heatpoint: [\"$rule_name\", 5 minutes]\n  - send-message: [$channel_id, \"hello $user_mention\"]\n</code></pre> This rule can only be triggered every 5 minutes: as you can see in the actions a single custom heatpoint gets added, making the custom heat level \"one\" for five minutes. This will make the condition <code>custom-heat-is</code> \"zero\" false, not allowing the rule to be run until the heatpoint expires.  </p>"},{"location":"warden/overview/#periodic-rules","title":"Periodic rules","text":"<p>Periodic rules are rules that can be set to run automatically every once in a while. Just like manual rules, they run against the entire server userbase: every user that satisfies its conditions will be affected by it. They can be particularly useful for certain needs, such as enforcing name conventions. A simple example: <pre><code>rank: 2\nname: dehoist-task\nevent: [periodic]\nrun-every: 15 minutes\nif:\n  - username-matches-any: [\"!*\"]\n  - if-not:\n      - nickname-matches-any: [\"*\"]\ndo:\n  - set-user-nickname: \"no hoisting\"\n</code></pre> This rule will run every 15 minutes (as defined by the mandatory <code>run-every</code> parameter) and will rename every user that has a name starting with an exclamation mark. Keep in mind that a bot restart will reset the timer: the rule above, for example, will only run 15 minutes after the bot first starts.  </p>"},{"location":"warden/overview/#conditional-actions","title":"Conditional actions","text":"<p>Sometimes you may want to carry on different actions according to certain conditions: this is doable by using conditions (or condition blocks) inside the <code>do</code> block. Each condition, or condition block, will equal to <code>true</code> or <code>false</code> and you can control the flow of the rule with <code>if-true</code> and <code>if-false</code>. <pre><code># Replies with pong when the user says ping, and viceversa\nrank: 1\nname: ping-pong\nevent: [on-message]\nif:\n  - message-matches-any: [\"ping\", \"pong\"]\ndo:\n  - compare: [\"$message\", \"contains-pattern\", \"ping\"]\n  - if-true:\n      - send-message: [$channel_id, \"pong\"]\n  - if-false:\n     - send-message: [$channel_id, \"ping\"]\n</code></pre></p> <pre><code>rank: 3\nname: filter\nevent: on-message\nif:\n  - message-matches-any: [\"*bad*\", \"*words*\"]\ndo:\n  - add-custom-heatpoint: [\"filter-$user_id\", 5 minutes]\n  - custom-heat-more-than: [\"filter-$user_id\", 4] # check if the user triggered this rule 5 or more times\n  - if-true: # if they did, ban them\n      - ban-user-and-delete: 0\n  - delete-user-message: # and proceed to delete the message in any case, ban or not\n</code></pre>"},{"location":"warden/overview/#nesting","title":"Nesting","text":"<p>Starting from Defender v1.12 you can make rules with nested condition blocks. This allows to define conditions with much greater complexity. An example:</p> <pre><code>rank: 1\nname: dehoister\nevent: [periodic, on-user-join]\nrun-every: 5 minutes\nif:\n  - is-staff: false # Ignore staff members\n  - if-any: # Check if the user has either...\n     - nickname-matches-any: [\"!*\"] # (A) a hoisting nickname\n     - if-all:\n        - username-matches-any: [\"!*\"] # (B1) or a hoisting username ...\n        - if-not:\n            - nickname-matches-any: [\"*\"] # ... (B2) with no nickname already set\n  - if-not: # They also need NOT to be...\n     - user-has-any-role-in: [\"Patron\"] # (1) ... a Patron member\n     - nickname-matches-any: [\"dehoisted\"] # (2) ... and not already dehoisted\ndo:\n  - set-user-nickname: \"dehoisted\"\n</code></pre>"},{"location":"warden/overview/#events","title":"Events","text":"Event When Context <code>on-message</code> A new message is sent message, user <code>on-message-edit</code> A message is edited message, user <code>on-message-delete</code> A message is deleted message, user <code>on-user-join</code> A new user joins the server user <code>on-user-leave</code> A user leaves the server user <code>on-role-add</code> A role is assigned to a user user <code>on-role-remove</code> A role is removed from a user user <code>on-reaction-add</code> A user added a reaction message, user <code>on-reaction-remove</code> A reaction is removed from a message. 'User' will always be the messages' original author. message, user <code>on-emergency</code> The server enters a state of emergency, either automatic or manual none <code>manual</code> The rule is manually run by an admin with <code>[p]defender warden run</code> user <code>periodic</code> The rule runs periodically, as defined by its own <code>run-every</code> parameter.The interval can be set between 5 minutes and 24 hours.See more info about periodic rules user <p>Important</p> <p>The reaction events only work for cached messages. This means that messages that are too old or predate your bot's last boot will not trigger these events. Events that work for non cached messages may be added in a future update.</p>"},{"location":"warden/overview/#deprecated-syntax","title":"Deprecated syntax","text":"<p>The following syntax is deprecated: it is not possible to create new rules with deprecated syntax.  </p> <ul> <li><code>send-dm</code>, <code>dm-user</code>, <code>send-to-channel</code>, <code>send-in-channel</code> replaced by <code>send-message</code> </li> <li><code>notify-staff-and-ping</code>, <code>notify-staff-with-embed</code> replaced by <code>notify-staff</code> </li> </ul>"},{"location":"warden/overview/#context-variables","title":"Context variables","text":"<p>For more informations see context Note: Since Defender 2.0 <code>$channel_*</code> context variables can also refer to a thread instead. If they do, <code>$parent_*</code> context variables will contain the data about the thread's channel (its parent).</p> Context variable Description <code>$rule_name</code> The rule's name <code>$notification_channel_id</code> The notification channel ID for the server <code>$guild</code> The guild's name <code>$guild_id</code> The guild's ID <code>$guild_icon_url</code> The guild's icon url <code>$guild_banner_url</code> The guild's banner url <code>$user</code> The user's name + the discriminator <code>$user_name</code> The user's name <code>$user_display</code> The user's name or nickname, if one is set <code>$user_id</code> The user's ID <code>$user_mention</code> The user's mention <code>$user_avatar_url</code> The user avatar's url <code>$user_nickname</code> The user's nickname. \"None\" if not set <code>$user_created_at</code> The date and time in which the user created the account <code>$user_joined_at</code> The date and time in which the user joined the server <code>$user_heat</code> The user's heat level <code>$message</code> The raw message content. Mentions are automatically escaped with a zero width space (<code>\\u200b</code>) <code>$message_clean</code> The message content. Mentions are transformed into the way the client shows it <code>$message_id</code> The message's ID <code>$message_created_at</code> The date and time in which the message was created <code>$message_link</code> The URL pointing to the message <code>$message_reaction</code> In a <code>on-reaction-*</code> event this contains the reaction that triggered it <code>$attachment_filename</code> The message attachment's filename, if any <code>$attachment_url</code> The message attachment's url, if any <code>$channel</code> The channel's / thread's name in the form of #channel_name. <code>$channel_name</code> The channel's / thread's name <code>$channel_id</code> The channel's / thread's ID <code>$channel_mention</code> The channel's / thread's mention <code>$channel_category</code> The channel / thread's category's name, if any <code>$channel_category_id</code> The channel / thread's category's id, if any <code>$parent</code> The thread's channel name in the form of #channel_name, if any <code>$parent_name</code> The thread's channel name, if any <code>$parent_id</code> The thread's channel ID, if any <code>$parent_mention</code> The thread's channel mention, if any <code>$parent_heat</code> The thread's channel heat level, if any <code>$role_id</code> The role's id in a <code>on-role-*</code> event <code>$role_name</code> The role's name in a <code>on-role-*</code> event <code>$role_mention</code> The role's mention in a <code>on-role-*</code> event <code>$role_added</code> Equals to 'true' in <code>on-role-add</code>, 'false' in <code>on-role-remove</code>"},{"location":"warden/statements/","title":"Actions / Conditions","text":""},{"location":"warden/statements/#conditions","title":"Conditions","text":""},{"location":"warden/statements/#message-conditions","title":"Message conditions","text":"<ul> <li><code>message-matches-any</code> Is <code>true</code> if any of the patterns that you list are found in the message's content. This kind of searching might be inconvenient in certain use cases: if you prefer to look for whole words instead see the condition <code>message-contains-word</code> Accepts: A list of patterns. Patterns can make use of wildcards such as <code>*</code> and <code>?</code> Context: <code>message</code> Example: <pre><code>- message-matches-any: [\"cat\"] # This will only match exactly this word\n# I like cats -&gt; Is false\n# cat -&gt; Is true\n# cats -&gt; Is false\n- message-matches-any: [\"*cat*\"] # The wildcard \"*\" represents any multiple characters\n# I like cats -&gt; Is true\n# I like cat -&gt; Is true\n# I like c4t -&gt; Is false\n- message-matches-any: [\"*c?t*\"] # The wildcard \"?\" represents any single character\n# I like cats -&gt; Is true\n# I like cat -&gt; Is true\n# I like c4t -&gt; Is true\n# xxxxcatxxxx -&gt; Is true\n</code></pre></li> <li><code>message-matches-regex</code> Is <code>true</code> if the regex returns a match against the message's content Accepts: A string representing a regular expression. Remember that <code>\\</code> must be escaped: turn all <code>\\</code> characters to <code>\\\\</code> when entering the rule. Context: <code>message</code> </li> <li><code>message-has-attachment</code> Will check if the message contains an attachment Accepts: A bool (true or false)   Context: <code>message</code> </li> <li><code>message-contains-word</code> Is <code>true</code> if any of the words you list are found in the message. It does what it is most commonly know \"whole word search\". Patterns are supported Example: <pre><code>- message-contains-word: [\"cat\"]\n# I like cats -&gt; Is false\n# I like cat -&gt; Is true\n# I like c4t -&gt; Is false\n# xxxxcatxxxx -&gt; Is false\n- message-contains-word: [\"c?t\"] # The wildcard \"?\" represents any single character\n# I like cats -&gt; Is false\n# I like cat -&gt; Is true\n# I like c4t -&gt; Is true\n# xxxxcatxxxx -&gt; Is false\n</code></pre></li> <li><code>message-contains-url</code> Will check if the message contains a clickable URL. Note: URLs lacking a protocol (http/https) will not be detected. Accepts: A bool (true or false)   Context: <code>message</code> </li> <li><code>message-contains-invite</code> Will check if the message contains a standard Discord invite. Invites that belong to the server are ignored. Accepts: A bool (true or false)   Context: <code>message</code> </li> <li><code>message-contains-media</code> Will check if the message contains any media link  (picture or video) Accepts: A bool (true or false)   Context: <code>message</code> </li> <li><code>message-contains-more-than-mentions</code> Will check if the message contains more than X user mentions. Accepts: A number representing the number of mentions Context: <code>message</code> </li> <li><code>message-contains-more-than-unique-mentions</code> Will check if the message contains more than X unique user mentions. As opposed to the non-unique variant the mentioned users are being counted, not just the mentions themselves. Accepts: A number representing the number of unique mentions. Context: <code>message</code> </li> <li><code>message-contains-more-than-role-pings</code> Will check if the message contains more than X unique role mentions. Only mentions that result in a ping will be counted. Accepts: A number representing the number of role mentions Context: <code>message</code> </li> <li><code>message-contains-more-than-emojis</code> Will check if the message contains more than X emojis. Important: emojis with modifiers, such as a thumbs up emoji with custom skin color, will be considered 2 separate emojis. Accepts: A number representing the number of emojis. Context: <code>message</code> </li> <li><code>message-has-more-than-characters</code> Will check if the message contains more than X characters. Emojis and custom emojis will be considered a single character. Mentions, both users and channels, are counted too. Accepts: A number representing the number of characters. Context: <code>message</code> </li> </ul>"},{"location":"warden/statements/#user-conditions","title":"User conditions","text":"<ul> <li><code>user-id-matches-any</code> Is <code>true</code> if any of the IDs that you list match the user's ID Accepts: A list of IDs (numbers) Context: <code>user</code> Example: <code>user-id-matches-any: [123456789, 2626262626]</code> </li> <li><code>username-matches-any</code> Is <code>true</code> if any of the patterns that you list are found in the user's username Accepts: A list of patterns. Patterns can make use of wildcards such as <code>*</code> and <code>?</code> Context: <code>user</code> </li> <li><code>username-matches-regex</code> Is <code>true</code> if the regex returns a match against the user's username Accepts: A string representing a regular expression. Remember that <code>\\</code> must be escaped: turn all <code>\\</code> characters to <code>\\\\</code> when entering the rule. Context: <code>user</code> </li> <li><code>nickname-matches-any</code> Is <code>true</code> if any of the patterns that you list are found in the user's nickname Accepts: A list of patterns. Patterns can make use of wildcards such as <code>*</code> and <code>?</code> Context: <code>user</code> </li> <li><code>nickname-matches-regex</code> Is <code>true</code> if the regex returns a match against the user's nickname Accepts: A string representing a regular expression. Remember that <code>\\</code> must be escaped: turn all <code>\\</code> characters to <code>\\\\</code> when entering the rule. Context: <code>user</code> </li> <li><code>display-name-matches-any</code> Is <code>true</code> if any of the patterns that you list are found in the user's display name. The display name can be the user's server specific nickname, if they have one set, otherwise it's their global name or their username. Accepts: A list of patterns. Patterns can make use of wildcards such as <code>*</code> and <code>?</code> Context: <code>user</code> </li> <li><code>display-name-matches-regex</code> Is <code>true</code> if the regex returns a match against the user's display name. The display name can be the user's server specific nickname, if they have one set, otherwise it's their global name or their username. Accepts: A string representing a regular expression. Remember that <code>\\</code> must be escaped: turn all <code>\\</code> characters to <code>\\\\</code> when entering the rule. Context: <code>user</code> </li> <li><code>user-activity-matches-any</code> Is <code>true</code> if any of the patterns that you list are found in any of the user's activities Accepts: A list of patterns. Patterns can make use of wildcards such as <code>*</code> and <code>?</code> Context: <code>user</code> </li> <li><code>user-status-matches-any</code> Is <code>true</code> if any of the statuses that you list are the user's current status Accepts: A list of statuses. Can be <code>online</code>, <code>idle</code>, <code>dnd</code> or <code>offline</code> Context: <code>user</code> </li> <li><code>user-created-less-than</code> Is <code>true</code> if the user's account has been created less than  ago. Accepts: A timedelta. Or a number, representing the amount of hours to be checked Context: <code>user</code> Example: <code>user-created-less-than: 2 hours</code> <li><code>user-joined-less-than</code> Is <code>true</code> if the user has joined the server less than  ago. Accepts: A timedelta. Or a number, representing the amount of hours to be checked Context: <code>user</code> Example: <code>user-joined-less-than: 2 hours</code> <li><code>user-has-default-avatar</code> Will check if the user has a default Discord avatar Accepts: A bool (true or false) Context: <code>user</code> Example: <code>user-has-default-avatar: true</code> will be <code>true</code> if the profile picture is a default one  </li> <li><code>user-has-sent-less-than-messages</code> Will check if the user has sent less than X messages in the server. Important: Defender, by default, counts how many messages a user sends in a server. This does not check the real total number of messages a user has sent in a server since its creation. Accepts: A number representing the number of messages Context: <code>user</code> </li> <li><code>user-is-rank</code> Will check if the user is the specified rank. This condition allows for rank-specific Warden rules and grants more granular control compared to the standard <code>rank</code> parameter, which merely indicates the maximum rank a rule will have effect on. Accepts: A number representing the rank the user must belong to Context: <code>user</code> </li>"},{"location":"warden/statements/#channel-conditions","title":"Channel conditions","text":"<ul> <li><code>channel-matches-any</code> Will check if the message was sent in any of the specified channels / threads Accepts: A list of channel names or IDs / thread IDs Context: <code>message</code> Example: <code>channel-matches-any: [general, testing, 483223782]</code> will be <code>true</code> if the message was sent in any of these channels  </li> <li><code>category-matches-any</code> Will check if the channel in which the message was sent belongs to any of the specified categories. Accepts: A list of category names or IDs Context: <code>message</code> </li> <li><code>channel-is-public</code> Will check if the message was sent in a publicly viewable channel. Accepts: A bool (true or false)   Context: <code>message</code> </li> </ul>"},{"location":"warden/statements/#server-conditions","title":"Server conditions","text":"<ul> <li><code>in-emergency-mode</code> Will check if the server is in emergency mode, either manual or automatic Accepts: A bool (true or false)   Context: Any  </li> </ul>"},{"location":"warden/statements/#roles-conditions","title":"Roles conditions","text":"<ul> <li><code>user-has-any-role-in</code> Is <code>true</code> if the user belongs to any of these roles in the list Accepts: A list of role names or IDs Context: <code>user</code> Example: <code>user-has-any-role-in: [12345678, spider-fighter]</code> will be <code>true</code> if the user belongs to any of these roles  </li> <li><code>is-staff</code> Will check if the user is a staff member Accepts: A bool (true or false)   Context: <code>user</code> </li> <li><code>is-helper</code> Will check if the user is a Defender helper Accepts: A bool (true or false)   Context: <code>user</code> </li> </ul>"},{"location":"warden/statements/#heat-level-conditions","title":"Heat level conditions","text":"<ul> <li><code>user-heat-is</code> Is <code>true</code> if the user has the specified heat level Accepts: A number between 0 and 100   Context: <code>user</code> </li> <li><code>user-heat-more-than</code> Is <code>true</code> if the user exceeds the specified heat level Accepts: A number between 0 and 100   Context: <code>user</code> </li> <li><code>channel-heat-is</code> Is <code>true</code> if the channel has the specified heat level Accepts: A number between 0 and 100   Context: <code>message</code> </li> <li><code>channel-heat-more-than</code> Is <code>true</code> if the channel exceeds the specified heat level Accepts: A number between 0 and 100   Context: <code>message</code> </li> <li><code>custom-heat-is</code> Is <code>true</code> if the custom heat has the specified level Accepts: A list with two elements: the custom heat level name and a number between 0 and 100. Rule name and IDs context variables are available for the name. Context: <code>Any</code> </li> <li><code>custom-heat-more-than</code> Is <code>true</code> if the custom heat exceeds the specified level Accepts: A list with two elements: the custom heat level name and a number between 0 and 100. Rule name and IDs context variables are available for the name. Context: <code>Any</code></li> </ul>"},{"location":"warden/statements/#custom-conditions","title":"Custom conditions","text":"<ul> <li><code>compare</code> Compares two values. Supports a variety of operators, textual and numeric. The comparison is case sensitive. This is most useful when used in conjunction with context variables. Using numeric operators with non-numeric values will raise an error. Supported operators: <code>==</code>, <code>!=</code>, <code>contains</code>, <code>contains-pattern</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>&gt;</code> <code>contains-pattern</code> supports a pattern, just like the condition <code>message-matches-any</code> and it's case insensitive. Example: <pre><code>- compare: [abc, \"==\", abc] # True\n- compare: [2, \"&lt;\", 1] # False\n\n- var-assign: [value1, \"I like bots\"]\n- var-assign: [value2, \"bots\"]\n- compare: [$value2, \"contains\", $value1] # True. Notice the $ symbol which denotes the use of context variables.\n</code></pre> Context: <code>Any</code> </li> </ul>"},{"location":"warden/statements/#actions","title":"Actions","text":"<ul> <li><code>send-message</code> Will send a message to the defined destination. Message editing is also supported. The message may include an embed. Please refer to the examples to understand its use. Accepts: A map with the destination, the message's content and the embed. Or a list with 2 elements, destination and message content Context: <code>Any</code> </li> </ul>"},{"location":"warden/statements/#user-actions","title":"User actions","text":"<ul> <li><code>set-user-nickname</code> Will change the nickname of a user Accepts: A string representing the new nickname to set. Supports context variables. Context: <code>user</code> </li> <li><code>delete-user-message</code> Will delete the user's message Accepts: Nothing   Context: <code>message</code> </li> <li><code>add-roles-to-user</code> Will assign the listed roles to the user Accepts: A list of roles (names / IDs) Context: <code>user</code> </li> <li><code>remove-roles-from-user</code> Will remove the listed roles from the user Accepts: A list of roles (names / IDs) Context: <code>user</code> </li> <li><code>ban-user-and-delete</code> Will ban the user from the server and delete X days worth of messages Accepts: A number representing the days worth of messages to delete Context: <code>user</code> </li> <li><code>kick-user</code> Will kick the user from the server Accepts: Nothing Context: <code>user</code> </li> <li><code>softban-user</code> Will kick the user from the server and delete 1 days worth of messages Accepts: Nothing Context: <code>user</code> </li> <li><code>punish-user</code> Will assign to the user the \"punish role\" that has been set in Defender Accepts: Nothing Context: <code>user</code> </li> <li><code>punish-user-with-message</code> Will assign to the user the \"punish role\" and deliver the \"punish message\" that have been set in Defender (see <code>[p]dset general</code>) Accepts: Nothing Context: <code>message</code> </li> <li><code>timeout-user</code> Will timeout the user for a set amount of time. The timeout can also be removed. Accepts: A string representing the timeout time. Some examples: '5 minutes', '2 hours', '4 days'. Passing nothing will remove the timeout.  Context: <code>user</code> </li> <li><code>get-user-info</code> Gets an attribute from an arbitrary user and assigns it to a variable. Many of the standard discord.py Member attributes are supported. Additionally, the attributes <code>is_staff</code> - <code>is_helper</code> with return value <code>true</code> or <code>false</code> <code>rank</code> which returns the rank's number <code>message_count</code> which returns the number of messages recorded by Defender are available. If the user cannot be found an error will be raised.  Accepts: The ID of a user (context variables are supported) and a map with the attribute to fetch as the value and the target variable as the key. Context: Any Example: <pre><code>- get-user-info: [$user_id, {joined: joined_at, created: created_at}]\n- send-message: [$channel_id, \"Your join date is $joined. Your account creation date is $created.\"]\n\n# Long form\n- get-user-info:\n    id: 123456789\n    mapping:\n       joined: joined_at\n       created: created_at\n       staff: is_staff\n       helper: is_helper\n</code></pre></li> </ul>"},{"location":"warden/statements/#staff-notifications","title":"Staff notifications","text":"<ul> <li><code>notify-staff</code> Will send a message to staff's notification channel. The message may include an embed. Please refer to the examples to understand its use.   Accepts: A string representing the message to send. Or a map that describes the embed and all the behaviors of the notification. Context: Any  </li> <li><code>send-mod-log</code> Will create a new mod-log case of the last expel action issued by the rule Accepts: A string representing the reason of the expel action. Supports context variables. Context: Any  </li> <li><code>send-to-monitor</code> Will send a message to Defender's monitor, <code>[p]defender monitor</code> Accepts: A string representing the message to send. Supports context variables. Context: Any  </li> <li><code>warnsystem-warn</code> Will warn one or more users using the WarnSystem cog. This is an integration: the 3rd party cog WarnSystem must be installed and loaded. Accepts: See example Context: Any Example: <pre><code># Mutes a user for 4 hours\n- warnsystem-warn: [2626262626, 2, \"Spammer\", \"4 hours\"]\n\n# Long form is also supported and it handles most attributes found in the API.\n# Documentation TBA. PRs welcome :-)\n</code></pre></li> </ul>"},{"location":"warden/statements/#server-actions","title":"Server actions","text":"<ul> <li><code>set-channel-slowmode</code> Will set (or deactivate) slowmode of the channel in the context's message Accepts: A string representing the slowmode time. Some examples: '5 seconds', '2 minutes', '4 hours'. '0 seconds' will deactivate slowmode.  Context: <code>message</code> </li> <li><code>enable-emergency-mode</code> Will toggle emergency mode Accepts: A bool (true or false), representing whether emergency mode should be enabled or disabled Context: Any  </li> </ul>"},{"location":"warden/statements/#thread-actions","title":"Thread actions","text":"<ul> <li><code>archive-thread</code> Will archive a thread Accepts: Nothing  Context: <code>message</code> </li> <li><code>lock-thread</code> Will lock a thread Accepts: Nothing  Context: <code>message</code> </li> <li><code>archive-and-lock-thread</code> Will archive and lock a thread Accepts: Nothing  Context: <code>message</code> </li> <li><code>delete-thread</code> Will delete a thread Accepts: Nothing  Context: <code>message</code> </li> </ul>"},{"location":"warden/statements/#heat-level-actions","title":"Heat level actions","text":"<ul> <li><code>add-user-heatpoint</code> Adds a single heat point with the specified lifetime to the user's heat level Accepts: A string representing the heat point's lifetime. Some examples: '5 seconds', '2 minutes', '4 hours' Context: <code>user</code> Example: <code>add-user-heatpoint: 5 seconds</code> <code>add-user-heatpoint: 1m</code> </li> <li><code>add-user-heatpoints</code> Adds multiple heat points with the specified lifetime to the user's heat level Accepts: A list containing two elements: the amount of heatpoints to assign (1-100) and a string representing the heat points' lifetime. Some examples: '5 seconds', '2 minutes', '4 hours' Context: <code>user</code> Example: <code>add-user-heatpoints: [10, 5 seconds]</code> <code>add-user-heatpoints: [2, 1m]</code> </li> <li><code>add-channel-heatpoint</code> Adds a single heat point with the specified lifetime to the channel's heat level Accepts: A string representing the heat point's lifetime. Some examples: '5 seconds', '2 minutes', '4 hours' Context: <code>message</code> Example: <code>add-channel-heatpoint: 5 seconds</code> <code>add-channel-heatpoint: 1m</code> </li> <li><code>add-channel-heatpoints</code> Adds multiple heat points with the specified lifetime to the channel's heat level Accepts: A list containing two elements: the amount of heatpoints to assign (1-100) and a string representing the heat points' lifetime. Some examples: '5 seconds', '2 minutes', '4 hours' Context: <code>message</code> Example: <code>add-channel-heatpoints: [10, 5 seconds]</code> <code>add-channel-heatpoints: [2, 1m]</code> </li> <li><code>add-custom-heatpoint</code> Adds a single heat point with the specified lifetime to the custom heat level Accepts: A list containing two elements: a string representing the custom heat level name and a string representing the heat point's lifetime. Some examples: '5 seconds', '2 minutes', '4 hours'. Rule name and IDs context variables are available for the name. Context: <code>Any</code> Example: <code>add-custom-heatpoint: [\"filter-$user_id\", \"5 seconds\"]</code> </li> <li><code>add-custom-heatpoints</code> Adds multiple heat points with the specified lifetime to the custom heat level Accepts: A list containing three elements: a string representing the custom heat level name, a number representing the amount of heat points to add and a string representing the heat points lifetime. Some examples: '5 seconds', '2 minutes', '4 hours'. Rule name and IDs context variables are available for the name. Context: <code>Any</code> Example: <code>add-user-heatpoints: [\"$rule_name\", 10, 5 seconds]</code> </li> <li><code>empty-user-heat</code> Sets the user's heat level to 0 Accepts: Nothing Context: <code>user</code> </li> <li><code>empty-channel-heat</code> Sets the channel's heat level to 0 Accepts: Nothing Context: <code>message</code> </li> <li><code>empty-custom-heat</code> Sets the specified custom heat level to 0 Accepts: A string representing the custom heat level name. Rule name and IDs context variables are available for the name. Context: <code>Any</code> </li> </ul>"},{"location":"warden/statements/#various-actions","title":"Various actions","text":"<ul> <li><code>no-op</code> Does nothing. Useful only for testing a rule's conditions with <code>[p]defender warden run</code> Accepts: Nothing Context: Any  </li> <li><code>exit</code> Interrupts the rule's processing, not carrying on any further action. This is useful when used in conjunction with conditional actions. Accepts: Nothing Context: Any  </li> <li><code>issue-command</code> Will issue a bot command as if it was issued by the specified user. The specified user must be the rule's author. If no destination is specified issuing a command in a <code>message</code> context will make it issue in the same channel as the message's; in any other case the command will be issued in Defender's notification channel. Accepts: A list with two elements: a number representing the ID of the rule's author and a string representing the command to issue. The command must not contain the prefix. Context variables are supported. The long form of this action also supports a destination. Context: <code>Any</code> Example: <pre><code>- issue-command: [2626262626, \"ban $user_id User has been banned by Warden's rule $rule_name\"]\n- issue-command:\n   issue_as: 2626262626 # User ID\n   command: ping # Command\n   destination: 123456 # Channel ID\n</code></pre></li> <li><code>delete-last-message-sent-after</code> Will delete the last message sent through a Warden action after the specified time. The time must be between 1 and 15 minutes. Accepts: A string representing the time to wait before deleting the message Context: <code>Any</code> Example: <code>send-message: [$channel_id, I'm going to disappear in 5 seconds!]</code> <code>delete-last-message-sent-after: 5 seconds</code> </li> </ul>"},{"location":"warden/statements/#variables-related-actions","title":"Variables related actions","text":"<ul> <li><code>var-assign</code> Assigns a value to a variable. <pre><code>- var-assign: [my_var, 123]\n- var-assign:\n    var_name: my_var\n    value: 123\n    evaluate: false # (optional, if true any context variable contained in value will be evaluated)\n# The variable my_var will be equal to 123\n</code></pre></li> <li><code>var-assign-random</code> Assigns a random value to a variable, picking one from a list of choices. Supports weighted choices <pre><code># A simple, non-weighted choice\n- var-assign-random: [my_var, [apple, banana, pear]]\n- var-assign-random:\n    var_name: my_var\n    choices: [apple, banana, pear]\n    evaluate: false # (optional, if true any context variable contained in value will be evaluated)\n# A weighted choice\n- var-assign-random:\n    var_name: my_var\n    choices:\n       apple: 10\n       banana: 1\n       pear: 2\n    evaluate: false # (optional, if true any context variable contained in value will be evaluated)\n</code></pre></li> <li><code>var-assign-heat</code> Assigns a heat level value to a variable. Supports all kinds of heat levels. <pre><code>- add-user-heatpoints: [2, 10 minutes]\n- add-channel-heatpoints: [3, 10 minutes]\n- add-custom-heatpoints: [example, 4, 10 minutes]\n- var-assign-heat: [u_heat, user_heat] # Assigns user's heat to the variable u_heat\n- var-assign-heat: [ch_heat, channel_heat] # Assigns channel's heat to the variable ch_heat\n- var-assign-heat: [cu_heat, example] # Assigns custom heat \"example\" to the variable cu_heat\n\n- send-to-monitor: \"Custom heat level 'example': $cu_heat\" # Displays the custom heat level \"example\"\n\n- var-math: [result, \"$u_heat\", \"+\", \"$ch_heat\"] # Calculates the sum of user heat and channel heat\n- send-to-monitor: \"This is the sum of user and channel heat levels: $result\"\n</code></pre></li> <li><code>var-math</code> Allows to perform mathematical operations with up to two operands. Supports context variables. Supported operators: +, -, *, /, pow, abs, floor, ceil, trunc <pre><code>- var-math: [re, 1, \"+\", 1] # var re equals to 2\n- var-math: [re, 2, \"*\", 3] # var re equals to 6\n- var-math: [re, -5, \"abs\"] # var re equals to 5\n- var-math: [re, 5.1, \"ceil\"] # var re equals to 6\n- var-math: [re, 2.26, \"trunc\"] # var re equals to 2\n\n- var-assign: [op1, 52]\n- var-assign: [op2, 2]\n- var-math: [re, \"$op1\", \"/\", \"$op2\"] # var re equals to 26.0\n</code></pre></li> <li><code>var-split</code> Splits a variable into parts, using separator as the delimiter, and assigns the parts to different variables. If there are more parts than provided variables, the remaining parts will be discarded. If there are fewer parts than provided variables, an empty string will be assigned to the remaining variables. Maximum splits can be specified, by default there is no limit.  <pre><code>- var-assign: [fruit, \"apple pear banana tomato\"]\n\n# fruit1 will contain \"apple\", fruit2 \"pear\", etc. Splits are done left to right.\n- var-split: [fruit, \" \", [fruit1, fruit2, fruit3, fruit4]]\n\n# As before fruit1 will contain \"apple\", fruit2 \"pear\" but the remaining parts will be lost\n- var-split: [fruit, \" \", [fruit1, fruit2]]\n\n# A max_split of 1 is specified, fruit1 will still be \"apple\", but fruit2 will be \"pear banana tomato\"\n- var-split: [fruit, \" \", [fruit1, fruit2], 1]\n- compare: [\"$fruit2\", \"==\", \"pear banana tomato\"] # True!\n\n# Same as before, but fruit3 will be an empty string: only one split has been done, and there's nothing left to assign to fruit3.\n- var-split: [fruit, \" \", [fruit1, fruit2, fruit3], 1]\n- compare: [\"$fruit1\", \"==\", \"apple\"] # True!\n- compare: [\"$fruit3\", \"==\", \"\"] # True!\n\n# Long form:\n- var-split:\n    var_name: fruit\n    separator: \" \"\n    split_into: [fruit1, fruit2, fruit3]\n    max_split: 1 # (optional)\n</code></pre></li> <li><code>var-slice</code> Slices a variable according to the indices (the position of the characters) that are being passed. If a variable name is passed with slice_into the original variable will be left untouched. The optional parameter step, found in Python's string slicing, can also be passed. Remember than indices start from 0, not 1. <pre><code>- var-assign: [my_var, \"abcdefgh\"]\n- var-slice: [my_var, 0, 2, sliced]\n- compare: [\"$sliced\", \"==\", \"ab\"] # True!\n\n- var-slice: [my_var, 0, 4]\n- compare: [\"$my_var\", \"==\", \"abcd\"] # True!\n\n- var-assign: [my_var, \"abcdefgh\"]\n# Long form\n- var-slice:\n    var_name: my_var\n    index: 0\n    end_index: 99\n    slice_into: sliced\n    step: 2\n- compare: [\"$sliced\", \"==\", \"aceg\"] # True!\n</code></pre></li> <li><code>var-replace</code> Modifies a variable with all the occurrences of strings replaced by substring. Strings can be a single value or a list of values. <pre><code>- var-assign: [my_var, \"I like apples a lot\"]\n- var-replace: [my_var, a, 4]\n- compare: [\"$sliced\", \"==\", \"I like 4pples 4 lot\"] # True!\n\n- var-assign: [my_var, \"I like apples a lot\"]\n- var-replace: [my_var, [a, p], x]\n- compare: [\"$sliced\", \"==\", \"I like xxxles x lot\"] # True!\n\n# Long form\n- var-replace:\n    var_name: my_var\n    strings: a # Can also be a list, as shown above\n    substring: b\n</code></pre></li> <li><code>var-transform</code> Modifies a variable depending on the \"operation\" that it's being requested. Supported operations are capitalize, lowercase, reverse, uppercase, title. <pre><code>- var-assign: [my_var, \"I like apples A LOT\"]\n- var-transform: [my_var, lowercase]\n- compare: [\"$my_var\", \"==\", \"i like apples a lot\"] # True!\n\n- var-transform: [my_var, uppercase]\n- compare: [\"$my_var\", \"==\", \"I LIKE APPLES A LOT\"] # True!\n\n- var-assign: [my_var, \"I like apples a lot\"]\n- var-transform: [my_var, title] # Capitalizes the first letter of each word\n- compare: [\"$my_var\", \"==\", \"I Like Apples A Lot\"] # True!\n\n- var-assign: [my_var, \"two words\"]\n- var-transform: [my_var, capitalize] # Only capitalizes the first letter\n- compare: [\"$my_var\", \"==\", \"Two words\"] # True! \n\n# Long form\n- var-transform:\n    var_name: my_var\n    operation: uppercase\n</code></pre></li> </ul>"}]}